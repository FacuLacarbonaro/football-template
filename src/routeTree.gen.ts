/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TicketsImport } from './routes/tickets'
import { Route as NewsImport } from './routes/news'
import { Route as FixtureImport } from './routes/fixture'
import { Route as IndexImport } from './routes/index'
import { Route as StoreIndexImport } from './routes/store/index'
import { Route as TeamFirstTeamImport } from './routes/team/firstTeam'
import { Route as StoreCategoryImport } from './routes/store/category'

// Create/Update Routes

const TicketsRoute = TicketsImport.update({
  id: '/tickets',
  path: '/tickets',
  getParentRoute: () => rootRoute,
} as any)

const NewsRoute = NewsImport.update({
  id: '/news',
  path: '/news',
  getParentRoute: () => rootRoute,
} as any)

const FixtureRoute = FixtureImport.update({
  id: '/fixture',
  path: '/fixture',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StoreIndexRoute = StoreIndexImport.update({
  id: '/store/',
  path: '/store/',
  getParentRoute: () => rootRoute,
} as any)

const TeamFirstTeamRoute = TeamFirstTeamImport.update({
  id: '/team/firstTeam',
  path: '/team/firstTeam',
  getParentRoute: () => rootRoute,
} as any)

const StoreCategoryRoute = StoreCategoryImport.update({
  id: '/store/category',
  path: '/store/category',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/fixture': {
      id: '/fixture'
      path: '/fixture'
      fullPath: '/fixture'
      preLoaderRoute: typeof FixtureImport
      parentRoute: typeof rootRoute
    }
    '/news': {
      id: '/news'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof NewsImport
      parentRoute: typeof rootRoute
    }
    '/tickets': {
      id: '/tickets'
      path: '/tickets'
      fullPath: '/tickets'
      preLoaderRoute: typeof TicketsImport
      parentRoute: typeof rootRoute
    }
    '/store/category': {
      id: '/store/category'
      path: '/store/category'
      fullPath: '/store/category'
      preLoaderRoute: typeof StoreCategoryImport
      parentRoute: typeof rootRoute
    }
    '/team/firstTeam': {
      id: '/team/firstTeam'
      path: '/team/firstTeam'
      fullPath: '/team/firstTeam'
      preLoaderRoute: typeof TeamFirstTeamImport
      parentRoute: typeof rootRoute
    }
    '/store/': {
      id: '/store/'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/fixture': typeof FixtureRoute
  '/news': typeof NewsRoute
  '/tickets': typeof TicketsRoute
  '/store/category': typeof StoreCategoryRoute
  '/team/firstTeam': typeof TeamFirstTeamRoute
  '/store': typeof StoreIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/fixture': typeof FixtureRoute
  '/news': typeof NewsRoute
  '/tickets': typeof TicketsRoute
  '/store/category': typeof StoreCategoryRoute
  '/team/firstTeam': typeof TeamFirstTeamRoute
  '/store': typeof StoreIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/fixture': typeof FixtureRoute
  '/news': typeof NewsRoute
  '/tickets': typeof TicketsRoute
  '/store/category': typeof StoreCategoryRoute
  '/team/firstTeam': typeof TeamFirstTeamRoute
  '/store/': typeof StoreIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/fixture'
    | '/news'
    | '/tickets'
    | '/store/category'
    | '/team/firstTeam'
    | '/store'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/fixture'
    | '/news'
    | '/tickets'
    | '/store/category'
    | '/team/firstTeam'
    | '/store'
  id:
    | '__root__'
    | '/'
    | '/fixture'
    | '/news'
    | '/tickets'
    | '/store/category'
    | '/team/firstTeam'
    | '/store/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FixtureRoute: typeof FixtureRoute
  NewsRoute: typeof NewsRoute
  TicketsRoute: typeof TicketsRoute
  StoreCategoryRoute: typeof StoreCategoryRoute
  TeamFirstTeamRoute: typeof TeamFirstTeamRoute
  StoreIndexRoute: typeof StoreIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FixtureRoute: FixtureRoute,
  NewsRoute: NewsRoute,
  TicketsRoute: TicketsRoute,
  StoreCategoryRoute: StoreCategoryRoute,
  TeamFirstTeamRoute: TeamFirstTeamRoute,
  StoreIndexRoute: StoreIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/fixture",
        "/news",
        "/tickets",
        "/store/category",
        "/team/firstTeam",
        "/store/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/fixture": {
      "filePath": "fixture.tsx"
    },
    "/news": {
      "filePath": "news.tsx"
    },
    "/tickets": {
      "filePath": "tickets.tsx"
    },
    "/store/category": {
      "filePath": "store/category.tsx"
    },
    "/team/firstTeam": {
      "filePath": "team/firstTeam.tsx"
    },
    "/store/": {
      "filePath": "store/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
